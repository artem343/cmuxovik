# Generated by Django 3.0.3 on 2020-04-03 13:57


from django.db import migrations, transaction, IntegrityError
import json
from dateutil import parser
from django.contrib.auth.models import User
from django.core.exceptions import ObjectDoesNotExist

AUTHOR_USERNAME = 'cmuxbook'


@transaction.atomic
def fill_cmuxes(apps, schema_editor):
    Cmux = apps.get_model("cmuxovik", "Cmux")
    Author = apps.get_model("cmuxovik", "Author")
    Tag = apps.get_model("cmuxovik", "Tag")

    try:
        user = User.objects.get(username=AUTHOR_USERNAME)
    except ObjectDoesNotExist:
        user = User.objects.create_user(username=AUTHOR_USERNAME,
                                        email='sample@email.com',
                                        password='unusablepassword')
        user.set_unusable_password()
        user.save()

    author = Author.objects.get(user_id=user.id)

    with open('data/book_cmuxes.json') as f:
        j_cmuxes = json.load(f)
        for j_cmux in j_cmuxes:

            if Cmux.objects.filter(text=j_cmux['text']).exists():
                print(f"Cmux already exists: {j_cmux['text']}")
                continue

            cmux = Cmux.objects.create(
                text=j_cmux['text'],
                author=author,
                is_approved=True,
            )
            tag, created = Tag.objects.get_or_create(
                name=j_cmux['tag'], domain='стих не стих')
            cmux.tags.add(tag.id)
            cmux.created_at = parser.parse(j_cmux['time'], dayfirst=True)
            cmux.save()


# logic for migrating backwards
def delete_unapproved(apps, schema_editor):
    Cmux = apps.get_model("cmuxovik", "Cmux")
    Cmux.objects.filter(author__user__username=AUTHOR_USERNAME).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('cmuxovik', '0004_data_telegram'),
    ]

    operations = [
        migrations.RunPython(fill_cmuxes, delete_unapproved),
    ]
