name: staging

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  WEB_IMAGE: ghcr.io/$GITHUB_REPOSITORY/web
  NGINX_IMAGE: ghcr.io/$GITHUB_REPOSITORY/nginx

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v2
      - name: Add environment variables to .envs
        run: |
          echo DEBUG=0 >> .env.stage
          echo SECRET_KEY=${{ secrets.STAGE_SECRET_KEY }} >> .env.stage
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.STAGE_ALLOWED_HOSTS }} >> .env.stage

          echo SQL_ENGINE=django.db.backends.postgresql >> .env.stage
          echo SQL_DATABASE=${{ secrets.STAGE_SQL_DATABASE }} >> .env.stage
          echo SQL_USER=${{ secrets.STAGE_SQL_USER }} >> .env.stage
          echo SQL_PASSWORD=${{ secrets.STAGE_SQL_PASSWORD }} >> .env.stage
          echo SQL_HOST=${{ secrets.STAGE_SQL_HOST }} >> .env.stage
          echo SQL_PORT=${{ secrets.STAGE_SQL_PORT }} >> .env.stage

          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env.stage
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env.stage
          echo AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} >> .env.stage
          echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> .env.stage
          echo EMAIL_PASS=${{ secrets.EMAIL_PASS }} >> .env.stage

          echo DATABASE=postgres >> .env.stage

          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env.stage
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env.stage

          echo POSTGRES_USER=${{ secrets.STAGE_SQL_USER }} >> .env.stage.db
          echo POSTGRES_PASSWORD=${{ secrets.STAGE_SQL_PASSWORD }} >> .env.stage.db
          echo POSTGRES_DB=${{ secrets.STAGE_SQL_DATABASE }} >> .env.stage.db
      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=${{ env.WEB_IMAGE }}" >> $GITHUB_ENV
          echo "NGINX_IMAGE=${{ env.NGINX_IMAGE }}" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        run: echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: "docker-compose.ci.yml"
          up-flags: "--build"
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}
  stage:
    name: Deploy to Stage server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env.stage
          echo SECRET_KEY=${{ secrets.STAGE_SECRET_KEY }} >> .env.stage
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.STAGE_ALLOWED_HOSTS }} >> .env.stage

          echo SQL_ENGINE=django.db.backends.postgresql >> .env.stage
          echo SQL_DATABASE=${{ secrets.STAGE_SQL_DATABASE }} >> .env.stage
          echo SQL_USER=${{ secrets.STAGE_SQL_USER }} >> .env.stage
          echo SQL_PASSWORD=${{ secrets.STAGE_SQL_PASSWORD }} >> .env.stage
          echo SQL_HOST=${{ secrets.STAGE_SQL_HOST }} >> .env.stage
          echo SQL_PORT=${{ secrets.STAGE_SQL_PORT }} >> .env.stage

          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env.stage
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env.stage
          echo AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} >> .env.stage
          echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> .env.stage
          echo EMAIL_PASS=${{ secrets.EMAIL_PASS }} >> .env.stage

          echo DATABASE=postgres >> .env.stage

          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env.stage
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env.stage

          echo POSTGRES_USER=${{ secrets.STAGE_SQL_USER }} >> .env.stage.db
          echo POSTGRES_PASSWORD=${{ secrets.STAGE_SQL_PASSWORD }} >> .env.stage.db
          echo POSTGRES_DB=${{ secrets.STAGE_SQL_DATABASE }} >> .env.stage.db
      - name: Install SSH Client ðŸ”‘
        uses: webfactory/ssh-agent@v0.4.1 # This step installs the ssh client into the workflow run. There's many options available for this on the action marketplace.
        with:
          ssh-private-key: ${{ secrets.STAGE_PRIVATE_KEY }}
      - name: Build and deploy images on Stage server
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env.stage ./.env.stage.db ./docker-compose.stage.yml ${{ secrets.STAGE_SERVER_USER }}@${{ secrets.STAGE_SERVER_IP }}:~/cmuxovik-stage
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGE_SERVER_USER }}@${{ secrets.STAGE_SERVER_IP }} << 'ENDSSH'
            cd ~/cmuxovik-stage
            source .env.stage
            source .env.stage.db
            docker login -u ${{ github.actor }} -p ${{ secrets.CR_PAT }} ghcr.io
            docker pull $WEB_IMAGE  
            docker pull $NGINX_IMAGE
            env $(cat .env.stage) docker-compose -f docker-compose.stage.yml -p cmux-stage up -d
          ENDSSH
