###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.0-alpine as builder

# Define requirements file
ARG requirements=requirements/production.txt

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 and temporary Pillow dependencies
RUN apk update \
    && apk add --virtual build-deps jpeg-dev \
    && apk add gcc python3-dev musl-dev \
    && apk add postgresql-dev \
    && apk add zlib-dev libjpeg


RUN pip install --upgrade pip
# lint
RUN pip install flake8
COPY . /usr/src/app/
RUN flake8 --ignore=E501,F401 --exclude=*/migrations/*,*/settings/* . 

# install dependencies
COPY requirements/ /usr/src/app/requirements/
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r $requirements


#########
# FINAL #
#########

# pull official base image
FROM python:3.8.0-alpine

# Define settings file
ENV DJANGO_SETTINGS_MODULE=cmux_project.settings.production

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/static
RUN mkdir $APP_HOME/media
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq \
    # compile .po
    gettext \ 
    # Pillow
    jpeg-dev \
    zlib-dev 

COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# copy entrypoint-prod.sh
COPY ./entrypoint.prod.sh $APP_HOME

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]